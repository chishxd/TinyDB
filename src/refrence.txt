// library.c
#include "library.h"

#include <ctype.h>
#include <stdio.h>
#include <stdlib.h>
#include <string.h>

int Add_Student() {
  Student newStudent;
  FILE *student_info = NULL;

  printf("Enter the Name: \n");
  if (fgets(newStudent.name, sizeof(newStudent.name), stdin) == NULL) {
    printf("Error reading name.\n");
    return 1;
  }
  newStudent.name[strcspn(newStudent.name, "\n")] = '\0';

  printf("Enter Student ID (Roll number): \n");
  if (scanf("%d", &newStudent.ID) != 1) {
    printf("Invalid ID. Please enter a number.\n");
    return 1;
  }
  clearInputBuffer();

  printf("Enter student grade: \n");
  if (scanf(" %c", &newStudent.grade) != 1) {
    printf("Invalid grade. Please enter a single character.\n");
    return 1;
  }
  clearInputBuffer();

  // Open the file in binary append mode
  student_info = fopen("stud_info.bin", "ab");
  if (student_info == NULL) {
    printf("File can't be opened! An error occurred!!\n");
    return 1;
  }

  // Write the entire Student struct to the binary file
  if (fwrite(&newStudent, sizeof(Student), 1, student_info) != 1) {
    printf("Error saving data.\n");
    fclose(student_info);
    return 1;
  }
  printf("Data saved successfully.\n");

  fclose(student_info);
  return 0;
}

int Display_Student() {
  FILE *student_info = NULL;
  Student currentStudent;

  // Open the file in binary read mode
  student_info = fopen("stud_info.bin", "rb");

  if (student_info == NULL) {
    printf("Error: No student data found or file could not be opened.\n");
    return 1;
  }

  printf("\n--- Displaying All Students ---\n");
  printf("Name             ID     Grade\n");
  printf("-----------------------------------\n");

  int students_found = 0;
  // Read Student structs until EOF
  while (fread(&currentStudent, sizeof(Student), 1, student_info) == 1) {
    printf("%-17s%-7d%c\n", currentStudent.name, currentStudent.ID,
           currentStudent.grade);
    students_found = 1;
  }

  if (students_found == 0) {
    printf("No student records found in the file.\n");
  }
  printf("-----------------------------------\n\n");

  fclose(student_info);
  return 0;
}

int Search_Student() {
  int search_num;
  FILE *student_info = NULL;
  Student currentStudent;
  int found = 0;

  printf("Enter his roll Number:");
  if (scanf(" %d", &search_num) != 1) {
    printf("Invalid Input.\n");
    return 1;
  }
  clearInputBuffer();

  // Open the file in binary read mode
  student_info = fopen("stud_info.bin", "rb");
  if (student_info == NULL) {
    printf("Error: No student data found or file could not be opened.\n");
    return 1;
  }

  while (fread(&currentStudent, sizeof(Student), 1, student_info) == 1) {
    if (currentStudent.ID == search_num) {
      printf("\n--- Student Found ---\n");
      printf("Name: %s\n", currentStudent.name);
      printf("ID: %d\n", currentStudent.ID);
      printf("Grade: %c\n", currentStudent.grade);
      printf("-----------------------\n\n");
      found = 1;
      break;
    }
  }

  if (!found) {
    printf("Student with ID %d not found.\n", search_num);
  }

  fclose(student_info);
  return 0;
}

void Update_list() {
  printf("Update function not yet implemented. Please write the code.\n");
}

void Delete_Record() {
  FILE *student_info = NULL;

  // Open the file in binary write mode, which truncates it (empties it)
  student_info = fopen("stud_info.bin", "wb");
  if (student_info == NULL) {
    printf("Error: Could not open file for writing.\n");
    return;
  }

  printf("All student records deleted successfully.\n");
  fclose(student_info);
}

void clearInputBuffer() {
  int c;
  while ((c = getchar()) != '\n' && c != EOF);
}